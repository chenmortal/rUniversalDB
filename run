#!/bin/bash

readonly NUM_SLAVES_GROUPS=2 # Tune this
readonly NUM_SLAVES=$((5 * $NUM_SLAVES_GROUPS))

function masters() {
  # Start the image by running transact, and have it be in the background.
  for ((i = 10; i < 15; i++)); do
    CONTAINER_NAME="runiversal${i}";
    docker run --cap-add=NET_ADMIN -d --name="${CONTAINER_NAME}" --ip 172.19.0."${i}" --network=runiversal-net runiversal scripts/transact -i 172.19.0."${i}" -t masterbootup > /dev/null &
  done
  wait
}

function slaves() {
  # Start the image by running transact, and have it be in the background.
  for ((i = 15; i < $((15 + $NUM_SLAVES)); i++)); do
    CONTAINER_NAME="runiversal${i}";
    docker run --cap-add=NET_ADMIN -d --name="${CONTAINER_NAME}" --ip 172.19.0."${i}" --network=runiversal-net runiversal scripts/transact -i 172.19.0."${i}" -t freenode -f newslave -e 172.19.0.10 > /dev/null &
  done
  wait
}

function client_init () {
  # Start the image by running the client, but only to initialize the Master Group.
  docker run --cap-add=NET_ADMIN -it --name=rclient --ip 172.19.0.2 --network=runiversal-net runiversal scripts/client -i 172.19.0.2 -m '172.19.0.10 172.19.0.11 172.19.0.12 172.19.0.13 172.19.0.14' > /dev/null;
  # After we exit the terminal, clean up the container.
  docker container rm rclient > /dev/null;
}

function client() {
  # Start the image by running the client, and start an interactive terminal.
  docker run --cap-add=NET_ADMIN -it --name=rclient --ip 172.19.0.2 --network=runiversal-net runiversal scripts/client -i 172.19.0.2 -e 172.19.0.10;
  # After we exit the terminal, clean up the container.
  docker container rm rclient;
}

if [ "$1" = "setup" ]; then
  # This should be run once after installing docker to create the docker
  # network, the base image, etc.
  docker network create --subnet=172.19.0.0/16 runiversal-net
  docker build -t runiversal -f Dockerfile.init .
  docker build -t runiversal .

elif [ "$1" = "build" ]; then
  docker build -t runiversal .

# Spin a client and turn the current shell into an interactive CLI.
elif [ "$1" = "new_client" ]; then
  docker run --cap-add=NET_ADMIN -it --name=rclient"$2" --ip 172.19.0."$2" --network=runiversal-net runiversal scripts/client -i 172.19.0."$2" -e 172.19.0."$3"

# Spin up a slave in the background (starting as a FreeNode)
elif [ "$1" = "new_node" ]; then
  docker run --cap-add=NET_ADMIN -d --name=runiversal"$2" --ip 172.19.0."$2" --network=runiversal-net runiversal scripts/transact -i 172.19.0."$2" -t freenode -f "$3" -e 172.19.0."$4"

elif [ "$1" = "masters" ]; then
  masters

elif [ "$1" = "slaves" ]; then
  slaves

elif [ "$1" = "client_init" ]; then
  client_init

elif [ "$1" = "client" ]; then
  client

# Spin up the Master Group, `NUM_SLAVES_GROUPS` number of Slave Groups, and a an interactive client.
elif [ "$1" = "start" ]; then
  masters
  client_init
  slaves
  client

# Clean only what is allocated by the `start`
elif [ "$1" = "clean" ]; then
  CONTAINERS="rclient";
  for ((i = 10; i < $((15 + $NUM_SLAVES)); i++)); do
    CONTAINERS="${CONTAINERS} runiversal${i}";
  done
  docker kill ${CONTAINERS} &> /dev/null;
  docker container rm ${CONTAINERS} &> /dev/null;

# Do a deep clean, where we just kill all `runiversal` and `rclient` nodes that we might have spun up.
elif [ "$1" = "dclean" ]; then
  CONTAINERS="rclient";
  for ((i = 2; i < 10; i++)); do
    CONTAINERS="${CONTAINERS} rclient${i}";
  done
  for ((i = 10; i < 45; i++)); do
    CONTAINERS="${CONTAINERS} runiversal${i}";
  done
  docker kill ${CONTAINERS} &> /dev/null;
  docker container rm ${CONTAINERS} &> /dev/null;

# Clean up single `runiversal` node.
elif [ "$1" = "nclean" ]; then
  CONTAINER=runiversal"$2"
  docker kill ${CONTAINER} &> /dev/null;
  docker container rm ${CONTAINER} &> /dev/null;

# Clean up single `rclient` node.
elif [ "$1" = "cclean" ]; then
  CONTAINER=rclient"$2"
  docker kill ${CONTAINER} &> /dev/null;
  docker container rm ${CONTAINER} &> /dev/null;

elif [ "$1" = "test" ]; then
  cargo run --release --bin simtest -- -i 8 -r 80

elif [ "$1" = "test_all" ]; then
  cargo run --release --bin simtest -- -i 8 -r 80;
  cargo run --release --bin paxos;
  cargo run --release --bin paxos2pc_sim;

elif [ "$1" = "bench" ]; then
  cargo run --release --bin simtest -- -i 4 -r 8

else
  echo "unrecognized command: ${1}"

fi
